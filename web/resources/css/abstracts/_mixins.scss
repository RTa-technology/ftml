@use "sass:math";

/// Mixin for when an element is being hovered over.
/// Using this mixin instead of `:hover` accounts for edge cases.
@mixin hover {
  @media (any-hover: hover), (hover: hover) {
    &:not([disabled]):hover {
      @content;
    }
  }
}

/// Shorthand for a inverted `prefers-reduced-motion` media query.
@mixin tolerates-motion {
  @media (prefers-reduced-motion: no-preference) {
    @content;
  }
}

// Shorthand for the `prefers-reduced-motion` media query.
@mixin reduced-motion {
  @media (prefers-reduced-motion) {
    @content;
  }
}

/// Shorthand for `orientation: landscape` media query.
@mixin landscape {
  @media (orientation: landscape) {
    @content;
  }
}

/// Removes most of the built-in styling for an element.
@mixin reset {
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  text-decoration: none;
  background: none;
  border: none;
  &:not(:focus-visible) {
    outline: none;
  }
}

/// Hides content visually but not to screen readers.
@mixin hide-visually {
  position: absolute;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(100%);
  white-space: nowrap;
}

/// Adds ::after and ::before pseudo-elements labeling the element for screen-readers.
/// Like such: &::before = '[Start of $text]', &::after = '[End of $text]'
@mixin label-for-screenreaders($text) {
  &::before,
  &::after {
    @include hide-visually;
  }

  &::before {
    content: "[Start of " + $text + ".]";
  }

  &::after {
    content: "[End of " + $text + ".]";
  }
}

/// Make an object appear higher or lower using shadows.
///
/// @param $height Shadow size, roughly in pixels. Multiples of two are good values.
/// @param $boost Shadow darkness multiplier.
@mixin shadow($height: 1, $boost: 1) {
  $boost: ($boost * (math.div($height, 8)));

  $one: #{$height * 0.075}px;
  $two: #{$height * 0.5}px;
  $three: #{$height}px;

  @if $height != 0 {
    // this black magic is mostly inspired by how the Google Material libraries do it
    // prettier-ignore
    box-shadow:
      0 $two $three 0 rgba(black, 0.5 * $boost),
      0 0 0 $one (rgba(black, 0.1 * $boost));
  } @else if $height == 0 {
    box-shadow: none;
  }
}

/// Helper for creating a `&::after` overlay.
/// The content of this mixin will affect the overlay.
@mixin overlay($use-position: true) {
  @if $use-position {
    position: relative;
  }
  &::after {
    position: absolute;
    top: 0;
    left: 0;
    z-index: $z-above;
    width: 100%;
    height: 100%;
    pointer-events: none;
    content: "";
    @content;
  }
}

/// Utility for creating a `&::before` "underlay" highlight
/// when the element is manually focused.
@mixin focusHighlight($theme: "none", $use-position: true, $z-index: 1) {
  @if $z-index {
    z-index: $z-index;
  }

  @if $use-position {
    position: relative;
  }

  $background: var(--col-background-dim);

  @if ($theme == "dark") {
    $background: var(--col-dark-background-dim);
  }

  @if ($theme == "light") {
    $background: var(--col-light-background-dim);
  }

  &::before {
    position: absolute;
    top: -5%;
    left: -5%;
    z-index: -1;
    width: 110%;
    height: 110%;
    pointer-events: none;
    content: "";
    background: #0000;
    border-radius: 0.25rem;

    @include tolerates-motion {
      transition: background 75ms;
    }
  }

  &:focus-visible {
    outline: none;
    @content;

    &::before {
      background: $background;
    }
  }
}

/// Hides scrollbars, but still allows scrolling.
@mixin hide-scrollbars {
  scrollbar-width: none;
  &::-webkit-scrollbar {
    display: none;
  }
}

/// Adds styling to an element to make it behave like a link.
@mixin link-styling($color, $hover-color: $color, $underline: true) {
  color: $color;
  text-decoration: underline;
  text-decoration-color: transparent;
  cursor: pointer;

  @include tolerates-motion {
    transition: text-decoration-color 75ms, color 75ms;
  }

  @include hover {
    @if $underline {
      text-decoration-color: $hover-color;
    }
    color: $hover-color;
  }
}
